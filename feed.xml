<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ray ZZ</title>
    <description>Your destination for solving hyper-dimensional Rubik's Cubes, experimenting with microtonality, and stalking my course plans. Also, I don't even know ZZ.
</description>
    <link>http://www.rayzz.me//</link>
    <atom:link href="http://www.rayzz.me//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jun 2018 23:19:48 -0400</pubDate>
    <lastBuildDate>Wed, 06 Jun 2018 23:19:48 -0400</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>[Math] Excerpts from The Handbook of Cubik Math (Chapter 6)</title>
        <description>&lt;p&gt;As promised, here is the second blog post on excerpts from &lt;em&gt;The Handbook of Cubik Math&lt;/em&gt;, an outdated reference on solving the Rubik’s cube, where the text seems to be read in through a 
1980s OCR device, and left unedited afterwards.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;h3 id=&quot;chapter-6-the-cube-group-and-subgroups&quot;&gt;Chapter 6: The Cube Group and Subgroups&lt;/h3&gt;

&lt;h4 id=&quot;61-the-permutations-of-the-cube-form-a-group&quot;&gt;6.1 The Permutations of the Cube form a Group&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A &lt;em&gt;group&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;(S, \bullet)&lt;/script&gt; is a set of objects 
&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; and an operation denoted by &lt;script type=&quot;math/tex&quot;&gt;\bullet&lt;/script&gt; such that the following hold:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Closure: For all &lt;script type=&quot;math/tex&quot;&gt;X, Y \in S&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y \in S&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Associativity: For all &lt;script type=&quot;math/tex&quot;&gt;X, Y, Z \in S&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;(X \bullet Y) \bullet Z = X \bullet
(Y \bullet Z)&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Identity: There exists some &lt;script type=&quot;math/tex&quot;&gt;I \in S&lt;/script&gt; such that for all &lt;script type=&quot;math/tex&quot;&gt;X \in S&lt;/script&gt;,
&lt;script type=&quot;math/tex&quot;&gt;X \bullet I = I \bullet X = X&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Inverse: For all elements &lt;script type=&quot;math/tex&quot;&gt;X \in S&lt;/script&gt;, there exists an element in &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; called the inverse of 
&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, denoted by &lt;script type=&quot;math/tex&quot;&gt;X^{-1}&lt;/script&gt;, such that &lt;script type=&quot;math/tex&quot;&gt;X \bullet X^{-1} = X^{-1} \bullet X = I&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The &lt;em&gt;cube group&lt;/em&gt; is the group of permutations produced by every possible algorithm on the Rubik’s cube.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.1-1&lt;/em&gt;: Which of the four criteria of a group are satisfied by the set &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; of
positive real numbers, combined with each of the following operations?&lt;br /&gt;
a) addition: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = X + Y&lt;/script&gt;&lt;br /&gt;
b) multiplication: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = X \cdot Y&lt;/script&gt;&lt;br /&gt;
c) divisition: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = X/Y&lt;/script&gt;&lt;br /&gt;
d) subtraction: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = X - Y&lt;/script&gt;&lt;br /&gt;
e) maximum: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = max\{X, Y\}&lt;/script&gt;&lt;br /&gt;
f) average: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = (X + Y)/2&lt;/script&gt;&lt;br /&gt;
g) last: &lt;script type=&quot;math/tex&quot;&gt;X \bullet Y = Y&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.1-2&lt;/em&gt;: Which of the four criteria for a group are satisfied by the set of
four permutations produced by rotating a single face of the cube?&lt;/p&gt;

&lt;h4 id=&quot;62-generators-of-a-group&quot;&gt;6.2 Generators of a Group&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;(S, \bullet)&lt;/script&gt; be a group. Let &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; be a subset of &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;.
Then, let &lt;script type=&quot;math/tex&quot;&gt;\langle T \rangle&lt;/script&gt; consist of all elements of &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; which are produced by a finite combination of elements in &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; and of their inverses with operation &lt;script type=&quot;math/tex&quot;&gt;\bullet&lt;/script&gt;. 
Then, &lt;script type=&quot;math/tex&quot;&gt;(\langle T \rangle, \bullet)&lt;/script&gt;, or simply &lt;script type=&quot;math/tex&quot;&gt;\langle T \rangle&lt;/script&gt;, is the 
&lt;em&gt;group generated by&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;.
If &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; is a finite set &lt;script type=&quot;math/tex&quot;&gt;\{X, Y, \dots\}&lt;/script&gt;, we can write 
&lt;script type=&quot;math/tex&quot;&gt;\langle T \rangle = \langle X, Y, \ldots \rangle&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; be any finite group, and let &lt;script type=&quot;math/tex&quot;&gt;X \in S&lt;/script&gt;. Then,
&lt;script type=&quot;math/tex&quot;&gt;\langle X \rangle&lt;/script&gt; must be of finite size.&lt;br /&gt;
&lt;em&gt;Proof&lt;/em&gt;: By definition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A finite group is a &lt;em&gt;cyclic group&lt;/em&gt; if it can be generated by a single element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;\langle X \rangle = \{X, X^2, \ldots, X^n\}&lt;/script&gt; be a cyclic group such
that &lt;script type=&quot;math/tex&quot;&gt;X^n = I&lt;/script&gt;. We say &lt;script type=&quot;math/tex&quot;&gt;\langle X \rangle&lt;/script&gt; is of order &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The &lt;em&gt;order of group&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;, denoted &lt;script type=&quot;math/tex&quot;&gt;\left|S\right|&lt;/script&gt;, is the number of
elements in &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The order of the group generated by any element is called &lt;em&gt;the order of that
element&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.2-1&lt;/em&gt;: Show that if &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; is a non-empty subset of group &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;, then
&lt;script type=&quot;math/tex&quot;&gt;\langle T \rangle&lt;/script&gt; is a group.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.2-2&lt;/em&gt;: What conditions must be met by the order of a cyclic group if it contains
an element of order 2?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.2-3&lt;/em&gt;: In a cyclic group of order 12,&lt;br /&gt;
a) How many elements have order 1?&lt;br /&gt;
b) How many elements have order 2?&lt;br /&gt;
c) How many elements have order 3?&lt;br /&gt;
d) How many elements have order 4?&lt;br /&gt;
e) How many elements have order 5?&lt;br /&gt;
f) How many elements have order 6?&lt;br /&gt;
g) How many elements have order 12?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.2-4&lt;/em&gt;:&lt;br /&gt;
a) Find an order-12 algorithm &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; in the cube group.&lt;br /&gt;
b) In the cyclic group generated by &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, find:&lt;br /&gt;
i) A process of order 3&lt;br /&gt;
ii) A process of order 4&lt;br /&gt;
iii) A process of order 6&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.2-5&lt;/em&gt;: Show that every cyclic group &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is commutative. That is, for &lt;script type=&quot;math/tex&quot;&gt;x, y \in G&lt;/script&gt;,
&lt;script type=&quot;math/tex&quot;&gt;x \bullet y = y \bullet x&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.2-6 (harder)&lt;/em&gt;: Under what conditions does &lt;script type=&quot;math/tex&quot;&gt;\langle X^k \rangle&lt;/script&gt; have order &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;
for every integer &lt;script type=&quot;math/tex&quot;&gt;k \lt n&lt;/script&gt; where&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is the order of &lt;script type=&quot;math/tex&quot;&gt;\langle X \rangle&lt;/script&gt;?&lt;/p&gt;

&lt;h4 id=&quot;63-the-two-squares-group&quot;&gt;6.3 The Two-Squares Group&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A two-squares group is a group generated by half-turns of two adjacent faces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &amp;lt;U2, R2&amp;gt; is a two-squares group.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.3-1&lt;/em&gt;: How many permutations are in &amp;lt;U2, R2&amp;gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.3-2&lt;/em&gt;: What is the largest order of any permutation in &amp;lt;U2, R2&amp;gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.3-3&lt;/em&gt;: Show that &amp;lt;U2, R2&amp;gt; is not a cyclic group.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.3-4&lt;/em&gt;: Find two algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; in &amp;lt;U2, R2&amp;gt; such that &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;
are not the identity, and whose permutations are disjoint, meaning there does not exist a 
piece &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; moves &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; &lt;em&gt;and&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; moves &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. Show &lt;script type=&quot;math/tex&quot;&gt;\langle X, Y \rangle&lt;/script&gt; 
is a cyclic group.&lt;/p&gt;

&lt;h4 id=&quot;64-the-slice-group&quot;&gt;6.4 The Slice Group&lt;/h4&gt;

&lt;p&gt;Nothing useful here.&lt;/p&gt;

&lt;h4 id=&quot;65-the-two-generator-group&quot;&gt;6.5 The Two-Generator Group&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A two-generator (2-gen or 2G) group is a group generated by the rotations of
two adjacent faces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.5-1&lt;/em&gt;: Find a process in &amp;lt;U, R&amp;gt; which only twists two corners.&lt;/p&gt;

&lt;h4 id=&quot;66-other-subgroups-of-the-cube&quot;&gt;6.6 Other Subgroups of the Cube&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;(G, \bullet)&lt;/script&gt; be a group and let &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; be a subset of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;. 
&lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; is a &lt;em&gt;subgroup&lt;/em&gt; of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; if it forms its own group under the operation &lt;script type=&quot;math/tex&quot;&gt;\bullet&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: If &amp;lt;U, D, L, R, F, B&amp;gt; is the cube group, then a subgroup is
&amp;lt;U, D, R2, L2, F2, B2&amp;gt;, which has behaviour similar to a 3x3x2.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 6.6-1&lt;/em&gt;: Given a finite group &lt;script type=&quot;math/tex&quot;&gt;(G, \bullet)&lt;/script&gt;, show that if &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; is a non-empty
subset of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; that is closed, &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; is a subgroup of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;67-the-supergroup-and-other-larger-groups&quot;&gt;6.7 The Supergroup and Other Larger Groups&lt;/h4&gt;

&lt;p&gt;A supercube has more permutations than a regular Rubik’s cube…we get it.&lt;/p&gt;

&lt;p&gt;And that’s it for this chapter! In the next chapter, we will get into some interesting counting.
However, some of the theorems seem hard to prove, so I’ll either list the theorem
without the proof, and make another article with the proof once I got it, 
or I’ll upload an article on another topic in the meantime. Honestly, probably the second.&lt;/p&gt;

&lt;p&gt;Happy New Year, by the way.&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://www.rayzz.me//math/2017/12/30/handbook-cubik-2.html</link>
        <guid isPermaLink="true">http://www.rayzz.me//math/2017/12/30/handbook-cubik-2.html</guid>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>[Math] Excerpts from The Handbook of Cubik Math (Chapter 4)</title>
        <description>&lt;p&gt;Put simply, &lt;em&gt;The Handbook of Cubik Math&lt;/em&gt; is an outdated reference on solving the Rubik’s cube,
where the text seems to be read in through a 1980s OCR device, and left unedited afterwards.&lt;/p&gt;

&lt;p&gt;The notation is old (&lt;script type=&quot;math/tex&quot;&gt;R^{-1}&lt;/script&gt; anyone?), and of course, some of the content seems outright irrelevant,
such as the chapter on antislice moves. But then again, it could just be the fact that I’m not into
studying antislice moves.&lt;/p&gt;

&lt;p&gt;For these reasons, I have copied the parts of the book that I found interesting to serve as a reference
for other cubing nerds out there. Note that the wording has been changed in multiple places to suit more 
modern readers.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;h3 id=&quot;chapter-4-the-what-why-and-how-of-cube-movements&quot;&gt;Chapter 4: The What, Why, and How of Cube Movements&lt;/h3&gt;

&lt;p&gt;To avoid confusion, processes have been renamed algorithms, and there is not as much distinguishing
an algorithm and a permutation.&lt;/p&gt;

&lt;h4 id=&quot;41-algorithms&quot;&gt;4.1 Algorithms&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Any rearrangement of a finite set of objects is called a &lt;em&gt;permutation&lt;/em&gt; of those objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: &lt;script type=&quot;math/tex&quot;&gt;(x_1, x_2, \ldots, x_n)&lt;/script&gt; indicates an &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-&lt;em&gt;cycle&lt;/em&gt; where cubie &lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt; goes to the 
location of cubie &lt;script type=&quot;math/tex&quot;&gt;x_{i+1}&lt;/script&gt; for &lt;script type=&quot;math/tex&quot;&gt;1 \le i \le n-1&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;x_n&lt;/script&gt; goes to the location of &lt;script type=&quot;math/tex&quot;&gt;x_1&lt;/script&gt;. 
We denote &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; as the &lt;em&gt;length&lt;/em&gt; of the cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Given an algorithm &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; and a piece &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, let &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; denote the cycle &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;
forms upon repeating &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; multiple times. Then, &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; is the &lt;em&gt;cycle determined by&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; is well-defined. That is, the length of &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; is finite.&lt;br /&gt;
&lt;em&gt;Proof&lt;/em&gt;: See Chapter 6. In particular, the theorem that the order of an algorithm must be finite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The &lt;em&gt;cycle representation&lt;/em&gt; of an algorithm &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; influences pieces
&lt;script type=&quot;math/tex&quot;&gt;x_1, x_2, \ldots, x_k&lt;/script&gt;, is the union of the cycles determined by each &lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt;,
where duplicate cycles are removed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: The cycle representation of U is {(UFL, ULB, UBR, URF), (UF, UL, UB, UR)}, more simply
written as (UFL, ULB, UBR, URF)(UF, UL, UB, UR)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: &lt;script type=&quot;math/tex&quot;&gt;(x)_+&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is a corner denotes a clockwise corner twist of cubie 
&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. Similarly, &lt;script type=&quot;math/tex&quot;&gt;(x)_-&lt;/script&gt; denotes a counterclockwise corner twist of cubie &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.1-4&lt;/em&gt;: Find algorithms with the following cycle representations:&lt;br /&gt;
a) (FUR, LUF, BUL, RUB)(UR, UF, UL, UB)&lt;br /&gt;
b) (ULB, FLU, DRB)&lt;br /&gt;
c) (UFL)+ (DRB)-&lt;/p&gt;

&lt;h4 id=&quot;42-equivalent-algorithms&quot;&gt;4.2 Equivalent Algorithms&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Two algorithms are &lt;em&gt;equivalent&lt;/em&gt; if and only if they have the same cycle
representation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.2-1&lt;/em&gt;: Show that the following pairs of algorithms are equivalent:&lt;br /&gt;
a) F2 B2 L2 and R2 L2 B2 F2 R2&lt;br /&gt;
b) (F2 R2)2 and (R2 F2)4&lt;br /&gt;
c) F’ D2 F U F’ D2 F U2 and U2 R D R’ U2 R D’ R’&lt;br /&gt;
d) F R’ F’ R and U’ R U R’ F’ U F U’&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.2-2&lt;/em&gt;: Show that F R is &lt;em&gt;not&lt;/em&gt; equivalent to R F&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.3-3&lt;/em&gt;: Show that the definition of equivalent processes given in this section
forms an equivalence relation. That is, it is reflexive, symmetric, and transitive.&lt;/p&gt;

&lt;h4 id=&quot;43-identities-and-inverses&quot;&gt;4.3 Identities and Inverses&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The &lt;em&gt;identity algorithm&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt; is an algorithm &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; such that its cycle representation is the empty set. In other words, it is an algorithm that does nothing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: For two algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;X = Y&lt;/script&gt; means &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is equivalent to &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The &lt;em&gt;inverse&lt;/em&gt; of an algorithm &lt;script type=&quot;math/tex&quot;&gt;S = m_1m_2 \ldots m_n&lt;/script&gt; is
&lt;script type=&quot;math/tex&quot;&gt;S' = m_n' m_{n-1}' \ldots m_1'&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.3-2&lt;/em&gt;: True or false:&lt;br /&gt;
a) For each algorithm &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; there is exactly one algorithm &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;T = P'&lt;/script&gt;.&lt;br /&gt;
b) &lt;script type=&quot;math/tex&quot;&gt;PP' = I&lt;/script&gt; for all algorithms &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt;.&lt;br /&gt;
c) &lt;script type=&quot;math/tex&quot;&gt;P = P'&lt;/script&gt; for all algorithms &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt;.&lt;br /&gt;
d) Let &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; be the permutation obtained by applying algorithm &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; to a solved cube.
   Then, there exists exactly one permutation that represents applying algorithm &lt;script type=&quot;math/tex&quot;&gt;A'&lt;/script&gt; to a solved cube.&lt;br /&gt;
e) The inverse of U R is U’ R’.&lt;br /&gt;
f) For algorithms &lt;script type=&quot;math/tex&quot;&gt;X, Y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;YX = ZX&lt;/script&gt; implies &lt;script type=&quot;math/tex&quot;&gt;Y = Z&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;44-cyclic-order-of-an-algorithm&quot;&gt;4.4 Cyclic Order of an Algorithm&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The &lt;em&gt;order&lt;/em&gt; of algorithm &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; is the number of times &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; needed to repeat 
&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;A^n = I&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: The &lt;em&gt;order&lt;/em&gt; of algorithm &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; with a cycle representation &lt;script type=&quot;math/tex&quot;&gt;R = C_1C_2 \ldots C_n&lt;/script&gt;
is &lt;script type=&quot;math/tex&quot;&gt;LCM(|C_1|, |C_2|, \ldots, |C_n|)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;|C_i|&lt;/script&gt; denotes the length of cycle &lt;script type=&quot;math/tex&quot;&gt;C_i&lt;/script&gt;.&lt;br /&gt;
&lt;em&gt;Proof&lt;/em&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; be the order of algorithm &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; with cycle representation &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; as given.
Then, &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; must divide &lt;script type=&quot;math/tex&quot;&gt;|C_i|&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;1 \le i \le n&lt;/script&gt; since otherwise &lt;script type=&quot;math/tex&quot;&gt;A^n&lt;/script&gt; will leave
some cycle &lt;script type=&quot;math/tex&quot;&gt;C_i&lt;/script&gt; unsolved, a contradiction. Thus, &lt;script type=&quot;math/tex&quot;&gt;n = LCM(|C_1|, |C_2|, \ldots, |C_n|)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.4-1&lt;/em&gt;: What is the order of each of the following?&lt;br /&gt;
a) U&lt;br /&gt;
b) F R&lt;br /&gt;
c) F R’&lt;br /&gt;
d) F R F’ R’&lt;br /&gt;
e) L D2 L’&lt;br /&gt;
f) U2 L B’ D2 B L’&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.4-2&lt;/em&gt;: Find an order-3 algorithm that only moves edge pieces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.4-3 (harder)&lt;/em&gt;: What is the largest order that any algorithm on the cube can have?
Give an example of such an algorithm.&lt;/p&gt;

&lt;h4 id=&quot;45-finding-useful-algorithms&quot;&gt;4.5 Finding Useful Algorithms&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.5-1&lt;/em&gt;: Find an algorithm which only cycles seven edge pieces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.5-2&lt;/em&gt;: What is the smallest number of times needed to repeat each algorithm
such that all edges are solved?&lt;br /&gt;
a) F R’&lt;br /&gt;
b) F2 U’ D R2 U D’&lt;br /&gt;
c) L F2 L’&lt;br /&gt;
d) U F R F’ R’ U’&lt;br /&gt;
e) F R’ F’ R F’ U’ F&lt;br /&gt;
f) R’ F R F’ U&lt;br /&gt;
g) R2 U2 F2&lt;/p&gt;

&lt;h4 id=&quot;46-commutativity-and-commutators&quot;&gt;4.6 Commutativity and Commutators&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Any algorithm &lt;script type=&quot;math/tex&quot;&gt;A = XYX'Y'&lt;/script&gt; for two smaller algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; is
a &lt;em&gt;commutator&lt;/em&gt;, and can be expressed as &lt;script type=&quot;math/tex&quot;&gt;A = [X, Y]&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Two algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; &lt;em&gt;commute&lt;/em&gt; if &lt;script type=&quot;math/tex&quot;&gt;XY = YX&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: &lt;script type=&quot;math/tex&quot;&gt;XYX'Y' = I&lt;/script&gt; if and only if &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; commute.&lt;br /&gt;
&lt;em&gt;Proof&lt;/em&gt;: Assume &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; commute. Then, &lt;script type=&quot;math/tex&quot;&gt;XY = YX&lt;/script&gt; so &lt;script type=&quot;math/tex&quot;&gt;XYX'Y' = XY(YX)'
= XY(XY)' = I&lt;/script&gt;. Likewise, assume &lt;script type=&quot;math/tex&quot;&gt;XYX'Y' = I&lt;/script&gt;. Then, &lt;script type=&quot;math/tex&quot;&gt;XYX'Y'YX = IYX&lt;/script&gt; implies &lt;script type=&quot;math/tex&quot;&gt;XY = YX&lt;/script&gt;,
meaning &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; commute.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.6-1&lt;/em&gt;: Find an algorithm &lt;script type=&quot;math/tex&quot;&gt;Q \ne I&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;QX = XQ&lt;/script&gt; for every algorithm &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.6-2&lt;/em&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;S_A&lt;/script&gt; denote the set of locations affected by an algorithm &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;,
and assume we are given algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;.&lt;br /&gt;
a) If &lt;script type=&quot;math/tex&quot;&gt;S_X \cap S_Y = \emptyset&lt;/script&gt;, what is the cycle representation of &lt;script type=&quot;math/tex&quot;&gt;[X, Y]&lt;/script&gt;?&lt;br /&gt;
b) If &lt;script type=&quot;math/tex&quot;&gt;S_X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;S_Y&lt;/script&gt; have two locations in common, what is the largest number
   of locations that can be in &lt;script type=&quot;math/tex&quot;&gt;S_Z&lt;/script&gt; for &lt;script type=&quot;math/tex&quot;&gt;Z = [X, Y]&lt;/script&gt;?&lt;br /&gt;
c) If &lt;script type=&quot;math/tex&quot;&gt;S_X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;S_Y&lt;/script&gt; have two locations in common, what are all the possible sizes of
   &lt;script type=&quot;math/tex&quot;&gt;S_Z&lt;/script&gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.6-3&lt;/em&gt;: Simplify [F, R’][R, U’][U, F’], then derive its cycle representation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.6-4&lt;/em&gt;: Show that&lt;br /&gt;
a) [F, R]’ = [R, F]&lt;br /&gt;
b) [F, R’]5 = R’ [F, R] R&lt;br /&gt;
c) [F’, R’] = R’ F’ [F, R] F R&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.6-5&lt;/em&gt;: Repeat &lt;em&gt;4.6-3&lt;/em&gt; but for [(R2 U2 F2)3, U2].&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.6-6&lt;/em&gt;: What is the inverse of &lt;script type=&quot;math/tex&quot;&gt;[X, Y]&lt;/script&gt;?&lt;/p&gt;

&lt;h4 id=&quot;47-conjugates-building-new-processes-from-old&quot;&gt;4.7 Conjugates: Building New Processes From Old&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Any algorithm &lt;script type=&quot;math/tex&quot;&gt;A = XYX'&lt;/script&gt; for two smaller algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; is
a &lt;em&gt;conjugate of&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; &lt;em&gt;by&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, and can be expressed as &lt;script type=&quot;math/tex&quot;&gt;A = [X: Y]&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The cycle structure of a cycle representation &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; is the number of cycles
contained in &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; and the length of each cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: Conjugates preserve cycle structures. That is, the cycle representation of &lt;script type=&quot;math/tex&quot;&gt;XYX'&lt;/script&gt; is
isomorphic to that of &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; for any two algorithms &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;.&lt;br /&gt;
&lt;em&gt;Proof&lt;/em&gt;: If &lt;script type=&quot;math/tex&quot;&gt;X = I&lt;/script&gt; then &lt;script type=&quot;math/tex&quot;&gt;XYX' = Y&lt;/script&gt; and so the proof is trivial. Likewise, if &lt;script type=&quot;math/tex&quot;&gt;Y = I&lt;/script&gt; then
&lt;script type=&quot;math/tex&quot;&gt;XYX' = XIX' = I&lt;/script&gt; and again the proof is trivial.&lt;br /&gt;
Thus, let &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; be any two algorithms 
that are not identity. Then, &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; must move some cubie &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to location &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;, and we denote
this by &lt;script type=&quot;math/tex&quot;&gt;Y(a) = b&lt;/script&gt;.
Let &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; represent cubies such that &lt;script type=&quot;math/tex&quot;&gt;X(c) = a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;X(d) = b&lt;/script&gt;. 
Then, &lt;script type=&quot;math/tex&quot;&gt;XYX'(c) = d&lt;/script&gt;, and by substitution, &lt;script type=&quot;math/tex&quot;&gt;XYX'(X'(a)) = X'(b)&lt;/script&gt;, whereas &lt;script type=&quot;math/tex&quot;&gt;Y(a) = b&lt;/script&gt;,
so for all &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;XYX'&lt;/script&gt; has the same behaviour on location &lt;script type=&quot;math/tex&quot;&gt;X'(a)&lt;/script&gt; that &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; has on location
&lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;. By extension, the cycle representation of &lt;script type=&quot;math/tex&quot;&gt;XYX'&lt;/script&gt; contains an &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-cycle if and only if
the cycle representation of &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; contains an &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-cycle, so the cycle representation of &lt;script type=&quot;math/tex&quot;&gt;XYX'&lt;/script&gt; is 
isomorphic to that of &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;.
(Credits to Matthew Sheerin for helping me understand this proof given in the book).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.7-2&lt;/em&gt;: Show that [X: Y]3 = X Y3 X’.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.7-3&lt;/em&gt;: Given process Y = (F2 R2)3, find X such that the cycle representation of
[X: Y] is:&lt;br /&gt;
a) (UF, DF)(RF, RB)&lt;br /&gt;
b) (FU, FD)(FR, FL)&lt;br /&gt;
c) (FU, FR)(FD, FL)&lt;br /&gt;
d) (UF, RF)(UB, RB)&lt;br /&gt;
Given process Y = F2 R L’ U2 R’ L, find X such that the cycle representation of [X: Y] is:&lt;br /&gt;
e) (FU, RU, BU)&lt;br /&gt;
f) (FU, UR, RF)&lt;br /&gt;
g) (FU, RB, DL)&lt;br /&gt;
Given process Y = [U, R]3, find X such that the cycle representation of [X: Y] is:&lt;br /&gt;
h) (ULB, BRU)(UFL, FUR)&lt;br /&gt;
i) (ULB, URF)(UFL, BRU)&lt;br /&gt;
j) (ULB, URF, DLF, DRB)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exercise 4.7-4&lt;/em&gt;: Find an algorithm with the cycle representation
(LF, BL, RB, FR)(DLF, DBL, DRB, DFR)&lt;/p&gt;

&lt;p&gt;And that’s it for this chapter.&lt;/p&gt;

&lt;p&gt;Up next: Chapter 6, where we &lt;em&gt;finally&lt;/em&gt; start group theory!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://www.rayzz.me//math/2017/12/23/handbook-cubik-1.html</link>
        <guid isPermaLink="true">http://www.rayzz.me//math/2017/12/23/handbook-cubik-1.html</guid>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>[Life] The Numbers Game, and how to fail at all your New Years' resolutions</title>
        <description>&lt;p&gt;(Last time I said I was going to talk about toilet paper usage rates in my dorm…let’s not, 
since there’s too many variables to consider.)&lt;/p&gt;

&lt;p&gt;So, where have I been this time?&lt;/p&gt;

&lt;p&gt;Studying at school and finishing assignments one after another.&lt;/p&gt;

&lt;p&gt;The exam season is almost over and 
there remains one easy course. This year, I have made several resolutions and I have achieved none of them:
I did not solve a 4x4x4 blindfolded, I did not read through a math paper every two months on some subject 
such as sequent calculus or complex analysis, I did not improve my sketching skills, and
I did not finish implementing any of my side projects, nor did I refactor older side projects.&lt;/p&gt;

&lt;p&gt;Then, the question becomes what went wrong, and what I can do for next year.
Here is an analysis:&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;h3 id=&quot;forcing-interests&quot;&gt;Forcing interests&lt;/h3&gt;

&lt;p&gt;This June, I tried to get into machine learning through taking the Stanford Machine Learning Course 
on Coursera. Even though the course was greatly simplified, meaning the concepts were easy to take in,
I only realized until after I had finished the course that I did not exactly find the course a valuable
use of my time, especially since I still do not have any machine learning side projects going on right now,
nor do I have any planned for the next few months.&lt;/p&gt;

&lt;p&gt;Thus, I could have worked on reading up on other material instead.&lt;/p&gt;

&lt;p&gt;Speaking of other material, I &lt;em&gt;did&lt;/em&gt; at least realize last month that I didn’t really need
to know what a dual space was, so I stopped trying to shove that bit of linear algebra into my head,
and started concentrating on other fields of math instead such as groups and rings, which I really need to 
at least build a foundation on.&lt;/p&gt;

&lt;h3 id=&quot;managing-time-improperly&quot;&gt;Managing time improperly&lt;/h3&gt;

&lt;p&gt;I also noticed that even when given more time, I would often spend it on instant messaging services such
as Messenger and Discord, or even worse, browsing YouTube.
I realize that one reason why I am often surprised when I complete a 2.5-hour exam an hour early (when I do,
that is) is because when I am at home and sitting at the computer blasting metal and talking about 
the ZZ method on a 3x3x3 instead, I don’t finish questions nearly as quickly.&lt;/p&gt;

&lt;p&gt;In fact, this one time I finished eight self-assigned STAT 231 questions within 40 minutes just by
closing the laptop lid and not listening to music.&lt;/p&gt;

&lt;p&gt;Thus, the solution here is simply to schedule my screen time properly, and in terms of chatting,
actually see how much of the chat content is useful. Of course, “useful” depends on whom I’m talking to.&lt;/p&gt;

&lt;p&gt;Another solution which I am using right now is to use LeechBlock with a 60-second delay screen on YouTube,
so I have to wait 60 seconds for the delay screen to count down (switching to another tab or window resets
the timer), so I can go click on a video link and wait another 60 seconds until I can watch the video, and so
on. This way, I think more about whether the wait is actually worth it, and I either close the tab, or
I leave for a while to stretch and get my pencil case or scrap paper so that I can pressure myself 
into doing more productive things.&lt;/p&gt;

&lt;h3 id=&quot;failing-to-budget&quot;&gt;Failing to budget&lt;/h3&gt;

&lt;p&gt;This doesn’t really have to do with my resolutions, but wouldn’t it be silly if 
I said I didn’t know how much I was spending each month? Well, I don’t.&lt;/p&gt;

&lt;p&gt;Because I do not know how much I am spending per month, I cannot keep track of my assets and cannot
tell whether I am spending too little or too much. Then, because of impulsive shopping habits, I may
end up going online shopping, or walking to the on-campus stationery store.&lt;/p&gt;

&lt;p&gt;Thus, with a budget, I can track my expenditures and actually decide how to spend my remaining savings
for different purposes such as investments, gifts, and travel, and if I can tell that I do not have enough
to spend on extra materials, then I give myself incentive to not go “window” shopping, where “window”
is in quotation marks because I usually end up buying things. In turn, I would also save time by not 
going to a random music store and checking out the 5-string basses, for example. Easy.&lt;/p&gt;

&lt;h3 id=&quot;faking-productivity&quot;&gt;Faking productivity&lt;/h3&gt;

&lt;p&gt;This one’s a big one. I realized that I often feel productive just by going on YouTube and watching
other people do tasks such as extracting gold from ground-up computer parts, playing heavy metal bass lines,
or drawing pretty pictures with Copic markers.&lt;/p&gt;

&lt;p&gt;I am not too sure what causes my brain to be tricked so easily when it comes to this, but I at least know about
this issue now. Hopefully, I will be able to find psychology texts explaining this effect in greater detail.&lt;/p&gt;

&lt;h3 id=&quot;lacking-grit&quot;&gt;Lacking grit&lt;/h3&gt;

&lt;p&gt;I forgot which YouTube video I was watching when I heard the drummer in the video say something along the 
lines of “If you’re having a good time while playing drums, you’re not practicing.”&lt;/p&gt;

&lt;p&gt;Practice is not just going over easy sections and getting them as fast as possible, or, maybe it is,
but practice is &lt;em&gt;definitely&lt;/em&gt; also going over the tedious and difficult sections of a piece or a Rubik’s cube
solve repeatedly, failing hard in the process, but gradually improving by the rep.&lt;/p&gt;

&lt;p&gt;Since I had no grit, I gave up quickly after not having consistent success in solving the 3x3x3 blindfolded.
Thus, I stopped practicing, and as a result, got three failed solves (DNFs for “did not finish”) on my
scorecard during an official competition in October. If I had more grit, I most likely would’ve forced myself 
to do more solves, but instead I spent more time chatting, and drastically lowered my chances of even getting 
a success.&lt;/p&gt;

&lt;h3 id=&quot;playing-the-numbers-game&quot;&gt;Playing the Numbers Game&lt;/h3&gt;

&lt;p&gt;Yet, compared to all of the reasons so far, the Numbers Game is a much larger reason for my failure to 
complete my self-assigned tasks this year.&lt;/p&gt;

&lt;p&gt;Here is the way it works:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Definition”&lt;/em&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; be a task with a label &lt;script type=&quot;math/tex&quot;&gt;e \in S&lt;/script&gt; assigned to it, where &lt;script type=&quot;math/tex&quot;&gt;(S, \le)&lt;/script&gt; is a total
ordering of labels such that &lt;script type=&quot;math/tex&quot;&gt;e' \le e&lt;/script&gt; if and only if having label &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; is not more inferior
than having label &lt;script type=&quot;math/tex&quot;&gt;e'&lt;/script&gt;. 
Then, the Numbers Game is defined as either performing task &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; merely to get 
&lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; as high as possible without actual long-term benefit, or forgetting the original motive behind 
&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; (which is often deeper than just having a value for &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt;), and getting &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; as high as possible.&lt;/p&gt;

&lt;p&gt;Clearly, I’m just nerding out again by throwing out math terms (I have a terrible sense of playfulness),
so here are some examples that apply to me:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: If I am attempting to achieve higher grades at school even though I do not have use for those
higher grades, e.g. I’ll be working in industry, then I am playing the Numbers Game.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: If I am dragging myself outside the house, biking 40 minutes for a geocache even though
I already know it is a lame lamppost cache that does not take much effort to find, then
I am playing the Numbers Game, because I only want my find count to go up even though the original goal was
to challenge myself to navigate through more difficult terrain and visit more scenic sites.&lt;/p&gt;

&lt;p&gt;Essentially, by playing the Numbers Game, you waste time, and for what?
To compare yourself with “potential opposition”, and if anything in life needs to be an axiom,
it’s that “comparing the self to others is the best setup for failure”, or even worse, “a false
sense of success”.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is easy to fall for the Numbers Game, and two things happen:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Theorem”&lt;/em&gt;: For high &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; relative to “potential competition”, the person becomes arrogant and 
usually starts to slack off, unless that high &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; was obtained as a side-effect of other goals and not
directly, in which case the person is not playing the Numbers Game and the “theorem” may or may not hold.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Theorem”&lt;/em&gt;: For low &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; relative to “potential competition”, the person becomes envious of that
competition and starts making life decisions merely to boost up their value of &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt;, where either
boosting up &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; for this person has no long-term benefits, or there are “better things to do” for
this person.&lt;/p&gt;

&lt;p&gt;Therefore, the Numbers Game might as well equate to eventual regret. For me in particular,
the second theorem holds – I could’ve spent more time working on actual side projects rather than
making sure every homework assignment was spotless and perfect in presentation. Due to this
bad decision, I did not give myself the energy and time needed to write out another blog post all the way
until now.&lt;/p&gt;

&lt;p&gt;In closing, these are pretty much the reasons I have failed to carry through with my resolutions this year, 
and hopefully next year I’ll get (an admittedly smaller list of planned things) done.&lt;/p&gt;

&lt;p&gt;Up next: a sample of relevant definitions, theorems, and exercises from &lt;em&gt;The Handbook of Cubik Math&lt;/em&gt;!&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://www.rayzz.me//life/2017/12/18/resolutions-fail.html</link>
        <guid isPermaLink="true">http://www.rayzz.me//life/2017/12/18/resolutions-fail.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>[Language] Analysis of FSI learning times for French and Japanese</title>
        <description>&lt;p&gt;For the last three weeks I have been working mainly on three things: side projects, professional development coursework, and preparation for Newmarket Open 2017, a Rubik’s cube competition. Anyway, the last item is out of the way and the second-last item is nearly out of the way, so let’s continue with the posts.&lt;/p&gt;

&lt;p&gt;I recall that last time I said that I would take the Foreign Service Institute’s language learning times list and compare it to the Core French curriculum. For fun, I’ll also examine how long Japanese could take to learn for my friends, but first let’s find out what the Foreign Service Institute (FSI) has for us…&lt;!-- MORE --&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Wikibooks:Language_Learning_Difficulty_for_English_Speakers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for people who only speak English, we can learn French up to some “general professional proficiency” in 600 hours. This means that one hour of learning a day extends to knowing French very well in under two years, but would this mean that four hours of studying French a day allows us to gain a “professional level” of proficiency in under half a year?&lt;/p&gt;

&lt;p&gt;Not really. According to the Wikibooks article, we already know some reasons why these learners can learn so quickly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Those working in the FSI already have a knack for picking up languages quickly as they serve as professional translators.&lt;/li&gt;
  &lt;li&gt;The listed hours are only for class hours, meaning each learner must study the language for three to four additional hours per day on their own.&lt;/li&gt;
  &lt;li&gt;The self-study hours are directed, so it’s probably not as simple as just picking their favourite song in their target language and listening to it on repeat.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, with this in mind, let’s first increase the given times by 25% so that we require 750 class hours. Meanwhile, I took Core French from grades 4 to 11 but failed to have a conversation in only French with anyone in Montreal, so something must have went wrong…let’s see how many class hours I got.&lt;/p&gt;

&lt;p&gt;A school year in Ontario requires &lt;a href=&quot;http://www.edu.gov.on.ca/eng/general/list/calendar/holidaye.html&quot;&gt;at least 194 days&lt;/a&gt;. Then, there are 8 years from grades 4 to 11 so I had 1552 class hours of French right? Well, I forgot how often I had French in School, but it definitely wasn’t every day.&lt;/p&gt;

&lt;p&gt;Firstly, let’s cancel out grades 4 to 6 since during those grades I learned nothing. From grades 7 to 9, I had 50 minutes a day and 2.5 days/5 days a week. From grades 10 to 12, I had 75 minutes a day and also 2.5 days/5 days a week since French only took up one semester per year. By my calculations, this results in 29100 minutes in total, which sounds impressive until you realize it’s 485 hours. We’re still missing at least 265 hours.&lt;/p&gt;

&lt;p&gt;To make this slightly more interesting, let’s consider taking grade 12 French. Then, the estimate goes up to 606 hours. Also, in university, there’s only 3 hours of class a week per subject and 12 weeks per term, so every term if I keep taking French I would have 36 more class hours per course, meaning to reach 750 hours from 606 hours would require me to take exactly 4 more French courses in university, which is actually what I expected for the amount of time required to reach a truly competent level of speaking and reading in French with a Core French high school background.&lt;/p&gt;

&lt;p&gt;Thus, the FSI does not seem too far-fetched here. Furthermore, taking more French courses in university might not be the worst idea, but I already have other electives planned and I already lost most if not all of my motivation after failing so often in Montreal, so I’ll blame the Core French curriculum for making me even feel competent before working there and move on to learning other languages, such as Japanese…&lt;/p&gt;

&lt;p&gt;…This isn’t the smartest idea. Wikibooks lists it as requiring 2200 class hours, along with a warning that it would be slightly more difficult than other languages such as Mandarin or Arabic. Note that since we are talking about native English speakers, it makes some sense. But, I already know some Mandarin, so I shouldn’t need that many hours.&lt;/p&gt;

&lt;p&gt;Meanwhile, my friends who are taking Japanese courses watch &lt;del&gt;too much&lt;/del&gt; anime, so they also shouldn’t need that many hours…in theory.&lt;/p&gt;

&lt;p&gt;Either way, let’s see what Waterloo provides – JAPAN 101 is a 12-week course with 3 hours per week of lecture and tutorial combined. Then, we have 36 class hours. To get 2200 class hours we will need 61 courses. That’s more courses than I’ll take in my entire undergraduate career, so good luck to my friends I guess. But, let’s say somehow anime actually works as class hours and that my friends consistently watch 5 hours of anime a day on weekdays and 9 hours a day on weekends. This hypothesis is almost as ridiculous as &lt;a href=&quot;https://en.wikipedia.org/wiki/Spherical_cow&quot;&gt;spherical cows&lt;/a&gt;, but it’ll do to prevent both blog-reader and blog-writer from falling asleep, even though there’s only half a paragraph left. Then, we have that my friends would watch 2236 hours of anime a year, so they’re done after just 1 year! Clearly, they haven’t achieved this in reality yet…it must be the fact that they’re watching with English subtitles.&lt;/p&gt;

&lt;p&gt;See you next time when we check out the expected rate of toilet paper usage within a dorm of 4, and compare it to the amount of toilet paper I had to supply last term!&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://www.rayzz.me//language/2017/06/18/fsi-analysis.html</link>
        <guid isPermaLink="true">http://www.rayzz.me//language/2017/06/18/fsi-analysis.html</guid>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>[Math] Lotto 6/49 Odds Represented By Dice Rolls</title>
        <description>&lt;p&gt;The Lotto 6/49 is a Canadian lottery game where you get to choose 6 of 49 numbers for 3 dollars, and have a chance at winning millions. Now, the chance of choosing all six numbers correctly is 1 in &lt;script type=&quot;math/tex&quot;&gt;49 \choose 6&lt;/script&gt;, or 1 in approximately 13 million, which already sounds low. Hence, it’s easy to forget how small of a chance you really have at this game.&lt;/p&gt;

&lt;p&gt;Thus, here’s a Haskell program fragment that puts things into perspective by first calculating the number of coin tosses that you would need to guess correctly in a row such that the chance of doing so is as low or even lower than winning the lottery…
&lt;!-- MORE --&gt;
Then, it gives the same for six-sided dice rolls, and twenty-sided dice rolls respectively. As a bonus, it also considers the equivalents to choosing 4 out of 6 numbers correctly, which still gives you a few thousand dollars as a reward.&lt;/p&gt;

&lt;p&gt;Note I left out the main method since it just prints out a bunch of stats that you’ll see later anyway. Also, the recursive choose method is comfy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Invalid param&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;ceil_log&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ceil_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Invalid param&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ceiling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;And the output?&lt;/p&gt;

&lt;pre&gt;
You need to correctly guess 24 coin tosses  
OR 10 6-sided dice rolls  
OR 6 20-sided dice rolls to win the 6/49 lottery.  
  
You need to correctly guess 18 coin tosses  
OR 7 6-sided dice rolls  
OR 5 20-sided dice rolls to win the 4/49 lottery.  

Good Luck!

&lt;/pre&gt;

&lt;p&gt;Ok sure, but what if one or more of these numbers are overestimated by several degrees of magnitude, especially since we always round up the number of coin flips or dice rolls to make them integers? Well, there’s only one way to find out. Let’s add a function that calculates how off an estimate is, and get the main method to print some new numbers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;get_magnitudes_off&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;get_magnitudes_off&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_num&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Invalid params&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;And the new output is:&lt;/p&gt;

&lt;pre&gt;
Lotto 6/49 estimation results for 6 numbers:
Coin flips: 12.643154 magnitudes off.
Six-sided die rolls: 1.5726068 magnitudes off.
20-sided die rolls: 1.5138803 magnitudes off.

Lotto 6/49 estimation results for 4 numbers:
Coin flips: 10.815703 magnitudes off.
Six-sided die rolls: 8.266034 magnitudes off.
20-sided die rolls: 0.8481274 magnitudes off.

&lt;/pre&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;Do NOT use coin flips to estimate your chances at winning four or six numbers of Lotto 6-49 for you’ll be at least ten orders of magnitude off. This means your estimated probability at winning the lottery is at least 10 billion times smaller than the actual probability.&lt;/p&gt;

&lt;p&gt;Do use 20-sided dice to estimate your chances at winning four or six numbers of Lotto 6-49 for you’ll be at most just two orders of magnitude off.&lt;/p&gt;

&lt;p&gt;Thus, remember that if you can often guess five or six rolls of a 20-sided die correctly in a row, you can win the Lotto.&lt;/p&gt;

&lt;p&gt;For people who are only familiar with cubic six-sided dice,&lt;br /&gt;
&lt;strong&gt;If you can often guess 10 rolls of the 6-sided die correctly in a row (I doubt it), you can win the jackpot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Have fun playing now that you know this, and see you next time when we find out how long it should take to learn French according to the Foreign Service Institute, and how the Ontario Core French curriculum does in comparison!&lt;/p&gt;

</description>
        <pubDate>Wed, 31 May 2017 00:00:00 -0400</pubDate>
        <link>http://www.rayzz.me//math/2017/05/31/lottery-dice.html</link>
        <guid isPermaLink="true">http://www.rayzz.me//math/2017/05/31/lottery-dice.html</guid>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>[Math] Largest Comfortable Cube Size and the Decision To Buy A Gigaminx</title>
        <description>&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML&quot;&gt;
&lt;/script&gt;

&lt;p&gt;I am considering buying a gigaminx partly out of boredom and partly
for the purpose of having something to turn for half an hour straight
when there’s nothing else to do, such as when waiting for MiWay buses.&lt;/p&gt;

&lt;p&gt;For reference, here is how the gigaminx looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.shopify.com/s/files/1/0169/0924/products/Shengshou_Gigaminx_White02_1024x1024.jpg?v=1452828270&quot; alt=&quot;picture of a white gigaminx from cubedepotusa&quot; width=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But, being the picky cuber I am, I state that &lt;strong&gt;I will only buy the gigaminx if it contains fewer cubies than the 9x9x9 Rubik’s Cube&lt;/strong&gt;. This is because I’m OK with solving a 9x9x9, but anything above really gets tiring. Thus, let’s first calculate the number of cubies in a 9x9x9:
&lt;!-- MORE --&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are 8 vertices so we have at least 8 cubies&lt;/li&gt;
  &lt;li&gt;There are 12 edges each with 7 cubies so that gives us 84 more cubies&lt;/li&gt;
  &lt;li&gt;There are 6 centers each with 7*7 = 49 cubies so we add on 294 more cubies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, we have a total of 386 cubies.&lt;/p&gt;

&lt;p&gt;Now, let’s calculate the number of cubies in a gigaminx:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are 20 vertices so we have at least 20 cubies&lt;/li&gt;
  &lt;li&gt;There are 30 edges each with 3 cubies so that gives us 90 more cubies&lt;/li&gt;
  &lt;li&gt;There are 12 centers each with 11 cubies so that gives us 132 more cubies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, we have a total of &lt;em&gt;just&lt;/em&gt; 242 cubies. Now I actually want a gigaminx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, what really interests me more than the gigaminx itself would have to be the following question:&lt;/p&gt;

&lt;div class=&quot;focus&quot;&gt;
  &lt;p&gt;For some integer &lt;script type=&quot;math/tex&quot;&gt;m \ge 2&lt;/script&gt;, what is the smallest &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; Rubik’s cube such that the number of cubies it contains is greater than the number of cubies the &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; megaminx contains?&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Counting the number of cubies the Rubik’s cube contains is not hard – if you think about it as a subtraction problem rather than an addition problem, it’s just &lt;script type=&quot;math/tex&quot;&gt;n^3 - (n-2)^3&lt;/script&gt; for an &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; Rubik’s cube. But, we can simplify it by factoring it as &lt;script type=&quot;math/tex&quot;&gt;(n-(n-2))(n^2 + n(n-2) + (n-2)^2) = 6n^2 - 12n + 8&lt;/script&gt;, not bad.&lt;/p&gt;

&lt;p&gt;But, the real question is the number of cubies the &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;x&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; megaminx contains. We know that there are at least 20 cubies since there are 20 vertices, and we know that there are &lt;script type=&quot;math/tex&quot;&gt;30(m-2)&lt;/script&gt; edge pieces, so we have a total of at least &lt;script type=&quot;math/tex&quot;&gt;20 + 30(m-2)&lt;/script&gt; cubies, but it’s the centers that are interesting.&lt;/p&gt;

&lt;p&gt;We consider two cases: &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is odd, or &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is even.&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is odd, we have the megaminx, gigaminx, teraminx, etc. In these cases, the puzzle contains fixed centers, and T-centers exist. The number of cubies
&lt;em&gt;per center&lt;/em&gt; is then &lt;script type=&quot;math/tex&quot;&gt;1 + 5(m-3)/2 + 5((m-3)/2)^2&lt;/script&gt;, so we have a total of
&lt;script type=&quot;math/tex&quot;&gt;20 + 30(m-2) + [12 + 30(m-3) + 15(m-3)^2] = 15m^2 - 30m + 17&lt;/script&gt; cubies.&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is even, we have the kilominx, master kilominx, and I’m not sure what the 6x6x6 minx is called &lt;em&gt;(edit: it’s called the elite kilominx)&lt;/em&gt;. Anyway, the number of cubies &lt;em&gt;per center&lt;/em&gt; for those is &lt;script type=&quot;math/tex&quot;&gt;5((m-2)/2)^2&lt;/script&gt;, so we have a total of &lt;script type=&quot;math/tex&quot;&gt;20 + 30(m-2) + 15(m-2)^2 = 15m^2 - 30m + 20&lt;/script&gt; cubies.&lt;/p&gt;

&lt;p&gt;This might seem to suggest that the master kilominx has more cubies than the gigaminx, but remember that for the master kilominx, &lt;script type=&quot;math/tex&quot;&gt;m = 4&lt;/script&gt;, so we have 140 cubies, whereas for the gigaminx we must plug in &lt;script type=&quot;math/tex&quot;&gt;m = 5&lt;/script&gt; to obtain 242 cubies.&lt;/p&gt;

&lt;p&gt;Now comes the inequality, &lt;script type=&quot;math/tex&quot;&gt;6n^2-12n+8 &gt; 15m^2-30m+17&lt;/script&gt; for &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; odd or &lt;script type=&quot;math/tex&quot;&gt;6n^2-12n+8 &gt; 15m^2-30m+20&lt;/script&gt; for &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; even, &lt;script type=&quot;math/tex&quot;&gt;n &gt; m, m \ge 2&lt;/script&gt;. We want to find the smallest &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; for some given &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; that satisfies these conditions. Since I am too lazy to solve this by hand, I wrote a small Clojure program that solves this for &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; from 2 to 15 for me. Note that the 15x15x15 minx is the yottaminx, and yotta is the largest prefix on the SI scale, so I’m not going to consider any larger sizes.&lt;/p&gt;

&lt;h3 id=&quot;the-program&quot;&gt;The program&lt;/h3&gt;

&lt;p&gt;Note: I’m transferring over to Clojure from Racket and so I don’t know how to use all its idioms yet. Sorry for any eyesores.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cube-mega-bounds.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;min-mega-size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;min-cube-size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;max-mega-size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; We have to assume that n is never already way over&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-find-first-n-over&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upper-bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upper-bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-find-first-n-over&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upper-bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;solve-ineq&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;min-n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;num-mega-cubies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-find-first-n-over&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;min-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;num-mega-cubies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;solve-cube-ineq&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-12&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero? &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-30&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-30&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m-values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;min-mega-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;max-mega-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;solve-ineq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;min-cube-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m-values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pretty-print&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;counters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;min-mega-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;max-mega-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map list &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;counters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Megaminx of size %dx%dx%d has fewer cubies &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;than a cube of size %dx%dx%d.\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-main&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;solve-cube-ineq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pretty-print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;the-results&quot;&gt;The results&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Megaminx of size 2x2x2 has fewer cubies than a cube of size 3x3x3.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 3x3x3 has fewer cubies than a cube of size 5x5x5.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 4x4x4 has fewer cubies than a cube of size 6x6x6.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 5x5x5 has fewer cubies than a cube of size 8x8x8.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 6x6x6 has fewer cubies than a cube of size 9x9x9.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 7x7x7 has fewer cubies than a cube of size 11x11x11.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 8x8x8 has fewer cubies than a cube of size 13x13x13.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 9x9x9 has fewer cubies than a cube of size 14x14x14.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 10x10x10 has fewer cubies than a cube of size 16x16x16.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 11x11x11 has fewer cubies than a cube of size 17x17x17.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 12x12x12 has fewer cubies than a cube of size 19x19x19.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 13x13x13 has fewer cubies than a cube of size 20x20x20.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 14x14x14 has fewer cubies than a cube of size 22x22x22.&lt;/li&gt;
  &lt;li&gt;Megaminx of size 15x15x15 has fewer cubies than a cube of size 24x24x24.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, not only does the gigaminx have fewer pieces than the 9x9x9 Rubik’s cube, but the 6x6x6 minx &lt;em&gt;also&lt;/em&gt; has fewer pieces than the 9x9x9 Rubik’s cube. Doesn’t mean I’ll buy the latter, though.&lt;/p&gt;

&lt;p&gt;See you next time when we find out how many coin flips or rolls of a single 6-sided die you’ll have to guess correctly to win the lottery.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 May 2017 00:00:00 -0400</pubDate>
        <link>http://www.rayzz.me//math/2017/05/26/largest-comfortable-cube-size.html</link>
        <guid isPermaLink="true">http://www.rayzz.me//math/2017/05/26/largest-comfortable-cube-size.html</guid>
        
        
        <category>math</category>
        
      </item>
    
  </channel>
</rss>
